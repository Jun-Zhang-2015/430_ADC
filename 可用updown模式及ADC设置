/**************************************************
 * 19.496 Project
 *
 * Copyright 2015 University of Strathclyde
 **************************************************/
#include <msp430.h>
#include <driverlib.h>
#include "adc.h"
#include <math.h>

#define  abs(x)					((x)>0? x : -(x))
#define  PI  						3.1415926535897932384626

unsigned int i=0;
unsigned int j=0;
//unsigned int a=0;
unsigned int sin_tab[101];
unsigned int adcvalue;

unsigned int min_adc = 0;														  // 设置了初始值，在运行中进行调整			预设为 0,1023，等于去除了其作用
unsigned int max_adc = 500;													// 设置了初始值，在运行中进行调整		
unsigned int v=8888;

void PWM_setUp()
{
 //TA0.1 TA0.2
   TA0CTL |= TASSEL_2 + TACLR;//+TAIE;              //SMCLK, : Timer counts up to TAxCCR0
   TA0CCR0=  1600;                       
   
   TA0CCTL1 |= OUTMOD_6;//+CCIE;       // CCR1 toggle/set                   
   TA0CCTL2 |= OUTMOD_2;//+CCIE;       // CCR2 toggle/reset
   TA0CCTL0 |= OUTMOD_6+CCIE;          //Capture/compare interrupt enable. This bit enables the interrupt request of the corresponding CCIFG flag.
   TA0CTL |= MC_3;                     //Up/Down mode
   
   P1DIR |= BIT7+BIT6;                          
   P1SEL0 |= BIT7+BIT6; 
   
}

void ADC_setup()
{
  // Configure ADC A5 pin
  SYSCFG2 |= ADCPCTL5;
  
  ADCCTL0 |= ADCSHT_6 + ADCON + ADCMSC;   //  ADCON      
  ADCCTL1 |= ADCSHS_2 + ADCSSEL_2 + ADCDIV_7 + ADCCONSEQ_2; //repeat single channel; TA1.1 trig sample start （但是不知道为啥是1.1）
  ADCCTL2 |= ADCPDIV_2 + ADCRES;          // 10-bit conversion results
  ADCMCTL0 |= ADCINCH_5;          //ADC Input Channel A5 P1.5
  ADCIE |= ADCIE0;                // Enable ADC conv complete interrupt
  ADCCTL0 |= ADCENC;              // ADC enable

  // ADC conversion trigger signal --TimerA1.1  为啥??（这个设置是和例程一样的 但是并不知道和原来的选择差别在哪。。
  TA1CTL |= TASSEL_1 + TACLR;      // 01 ACLK 
  TA1CCR0 = 1600;           //PWM period
  TA1CCR1 = 800;            // TA1.  ADC trigger     
  TA1CCTL1 |= OUTMOD_4;            // toogle
  TA1CTL |= MC_1;           //UP mode
  
  P4DIR |= BIT0;     //这两句例程里面没有
  P4SEL0 |= BIT0;

}
int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;                          // Stop watchdog timer

    // Configure one FRAM waitstate as required by the device datasheet for MCLK
    // operation beyond 8MHz _before_ configuring the clock system.
    FRCTL0 = FRCTLPW | NWAITS_1;

    __bis_SR_register(SCG0);                           // disable FLL
    CSCTL3 |= SELREF__REFOCLK;                         // Set REFO as FLL reference source
    CSCTL0 = 0;                                        // clear DCO and MOD registers
    CSCTL1 &= ~(DCORSEL_7);                            // Clear DCO frequency select bits first
    CSCTL1 |= DCORSEL_5;                               // Set DCO = 16MHz
    CSCTL2 = FLLD_0 + 487;                             // DCOCLKDIV = 16MHz
    __delay_cycles(3);  
    __bic_SR_register(SCG0);                           // enable FLL
    while(CSCTL7 & (FLLUNLOCK0 | FLLUNLOCK1));         // FLL locked
    
    CSCTL4 |= SELMS__DCOCLKDIV | SELA__REFOCLK;        // set default REFO(~32768Hz) as ACLK source, ACLK = 32768Hz
                                                       // default DCOCLKDIV as MCLK and SMCLK source

    P1DIR |= BIT0 | BIT4;                              // set MCLK and LED pin as output
    P1SEL0 |= BIT4;                                    // set MCLK pin as second function
    P8DIR |= BIT0 | BIT1;                              // set ACLK and SMCLK pin as output
    P8SEL0 |= BIT0 | BIT1;                             // set ACLK and SMCLK pin as second function

    PM5CTL0 &= ~LOCKLPM5;                              // Disable the GPIO power-on default high-impedance mode
//  PMM_unlockLPM5();                                  // to activate previously configured port settings
   
    PWM_setUp();   // suqare wave frequency: 1M--450 ,8M--3.4K, 16M--6.9kHz 
    ADC_setup();
    
    for ( i =0;i<=100;i++)
 	sin_tab[i]= (sin(i*PI*2/100)+1)*720;	// sin_tab[i] = (sin(i*PI*2/MAX_SAMPLES)+1)*CCR0*0.5*ma;
                                                // ma=0.9, when ma>0.95 apparant ripple in current waveform
    
    __enable_interrupt();
    
    while(1)
    {
        do{
		 if ( abs(adcvalue-v)<2 ) 
		{
		 __delay_cycles(8000000/20);		//	delay 25ms	 ; 8000000*(1/MCLK)=0.5s 
		 continue;					//  旋钮没动，继续测试又没动
		}
		 break;
	  }while(1);	
	//  动了
 	do{
		v=adcvalue;
		__delay_cycles(8000000/20);			//  delay 25ms
	   if (adcvalue< min_adc )				
        	min_adc = adcvalue;
      	   if (adcvalue>max_adc)
        	max_adc = adcvalue;
           }while( abs(adcvalue-v)>=2);
     }
    
    // return 0;
}  

// ADC interrupt service routine
#pragma vector=ADC_VECTOR           				// these two lines are used by IAR and CCC
__interrupt void ADC_ISR(void)
{
  switch(__even_in_range(ADCIV,ADCIV_ADCIFG))
  {
    case ADCIV_ADCIFG:              				// conversion complete
        {      
    		adcvalue = ADCMEM0;
          //adcvalue = 103;
        break;
        }          
  }
  
  ADC_clearInterrupt(ADC_BASE, ADC_COMPLETED_INTERRUPT);
}

 //On the compare of TA0CCTL0
#pragma vector = TIMER0_A0_VECTOR
__interrupt void TIMERA0_ISR0(void) //Flag cleared automatically
{
    unsigned int  fan;
    TA0CCR1= sin_tab[j];        //
    fan = TA0CCR1 -1;
    if(fan<=0)
    {
     fan = 0;
    }
    TA0CCR2= fan;
    if(++j == 100)
    {
     j = 0;
    }
}
  
