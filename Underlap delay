/**************************************************
 * 19.496 Project
 *
 * Copyright 2015 University of Strathclyde
 **************************************************/
#include <msp430.h>
#include <driverlib.h>
#include "adc.h"
#include "math.h"

#define  PI                     3.14159265357

unsigned int i=0;
unsigned int j=0;
//unsigned int 
unsigned int sample;
double ta;
double tb;
double tc;
unsigned int samples;

//unsigned int samples = MIN_SAMPLES;				// 抽样数，随着旋钮转动变化，
//unsigned int rate = MAX_RATE;		                        // 频率， 没用
unsigned int min_adc = 256;								// 设置了初始值，在运行中进行调整
unsigned int max_adc = 512;								// 设置了初始值，在运行中进行调整
unsigned int adcvalue ;


void PWM_setUp()
{
 //TA0.1 TA0.2
   TA0CTL |= TASSEL_2+MC_3+TACLR;//+TAIE;              //SMCLK, MC_1= Up mode: Timer counts up to TAxCCR0
   
   P1DIR |= BIT7+BIT6;           // P1.6 and P1.7 to output
   P1SEL0 |= BIT7+BIT6;
  
   TA0CCTL1 |= OUTMOD_6;//+CCIE;       // CCR1 toggle/set                   
   TA0CCTL2 |= OUTMOD_2;//+CCIE;       // CCR2 toggle/reset
   TA0CCTL0 |= OUTMOD_6+CCIE;          //Capture/compare interrupt enable. This bit enables the interrupt request of the corresponding CCIFG flag.

   TA0CCR0 = 625;                     // PWM frequency 12.8kHz？ ---示波器检测PWM频率为12.76kHz (78.4us)
   TA0CCR1 = 312;      //P1.7 Low
   TA0CCR2 = 300;      // P1.6 high      Dead time= CCR1-CCR2=312-300 =12(单边）  --- 748ns /period

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;                          // Stop watchdog timer

    // Configure one FRAM waitstate as required by the device datasheet for MCLK
    // operation beyond 8MHz _before_ configuring the clock system.
    FRCTL0 = FRCTLPW | NWAITS_1;

    __bis_SR_register(SCG0);                           // disable FLL
    CSCTL3 |= SELREF__REFOCLK;                         // Set REFO as FLL reference source
    CSCTL0 = 0;                                        // clear DCO and MOD registers
    CSCTL1 &= ~(DCORSEL_7);                            // Clear DCO frequency select bits first
    CSCTL1 |= DCORSEL_5;                               // Set DCO = 16MHz
    CSCTL2 = FLLD_0 + 487;                             // DCOCLKDIV = 16MHz
    __delay_cycles(3);
    __bic_SR_register(SCG0);                           // enable FLL
    while(CSCTL7 & (FLLUNLOCK0 | FLLUNLOCK1));         // FLL locked

    CSCTL4 |= SELMS__DCOCLKDIV | SELA__REFOCLK;        // set default REFO(~32768Hz) as ACLK source, ACLK = 32768Hz
                                                       // default DCOCLKDIV as MCLK and SMCLK source

    P1DIR |= BIT0 | BIT4;                              // set MCLK and LED pin as output
    P1SEL0 |= BIT4;                                    // set MCLK pin as second function
    P8DIR |= BIT0 | BIT1;                              // set ACLK and SMCLK pin as output
    P8SEL0 |= BIT0 | BIT1;                             // set ACLK and SMCLK pin as second function

    //GPIO 8.1
  GPIO_setAsPeripheralModuleFunctionInputPin(GPIO_PORT_P8, GPIO_PIN1, GPIO_PRIMARY_MODULE_FUNCTION);
  //SYSCFG2 |= ADCPCTL9;


    PM5CTL0 &= ~LOCKLPM5;                              // Disable the GPIO power-on default high-impedance mode
//  PMM_unlockLPM5();                                  // to activate previously configured port settings

    PWM_setUp();   // suqare wave frequency: 1M--450 ,8M--3.4K, 16M--6.9kHz

   ADC_init(ADC_BASE,
            ADC_SAMPLEHOLDSOURCE_SC,
            ADC_CLOCKSOURCE_ADCOSC,
            ADC_CLOCKDIVIDER_1);
   ADC_enable(ADC_BASE);
   ADC_enableInterrupt(ADC_BASE,ADC_COMPLETED_INTERRUPT);
   ADC_clearInterrupt(ADC_BASE,ADC_COMPLETED_INTERRUPT);
   ADC_setupSamplingTimer(ADC_BASE, ADC_CYCLEHOLD_4_CYCLES, ADC_MULTIPLESAMPLESDISABLE);
   ADC_configureMemory(ADC_BASE,
                       ADC_INPUT_A9,
                       ADC_VREFPOS_AVCC,
                       ADC_VREFNEG_AVSS);

    __enable_interrupt();

    while(1)
    {
//        P1OUT ^= BIT0;                                 // Toggle P1.0 using exclusive-OR
//        __delay_cycles(8000000);                       // Delay for 80000*(1/MCLK)=0.5s

      ADC_startConversion(ADC_BASE, ADC_REPEATED_SINGLECHANNEL);
    }

     return 0;
}

// ADC interrupt service routine
#pragma vector=ADC_VECTOR           // these two lines are used by IAR and CCC
__interrupt void ADC_ISR(void)
{
  switch(__even_in_range(ADCIV,ADCIV_ADCIFG))
  {
    case ADCIV_ADCIFG:              // conversion complete
        {
    		adcvalue = ADCMEM0;
        if (adcvalue< min_adc )
        	min_adc = adcvalue;
        if (adcvalue>max_adc)
        	max_adc = adcvalue;
 //      sample = (int)18000*((float)adcvalue)/((float)1023);   //default 360
 //       ta = ((float)adcvalue)/((float)1023);
 //       samples = sample/1;
 //       if ( sample <= 360 )                              // 1下面有个死区？
 //       	sample = 360;

         break;
        }
  }

  ADC_clearInterrupt(ADC_BASE, ADC_COMPLETED_INTERRUPT);
}

 //On the compare of TA0CCTL0
#pragma vector = TIMER0_A0_VECTOR
__interrupt void TIMERA0_ISR0(void) //Flag cleared automatically
{
 
   TA0CCR0 =625;     //一定要有 才能正确持续中断
}
